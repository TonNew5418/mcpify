[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "mcpify"
version = "0.1.0"
description = "Transform any Git repository into intelligent MCP tools automatically"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MCPify Team", email = "team@mcpify.dev"},
]
maintainers = [
    {name = "MCPify Team", email = "team@mcpify.dev"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Code Generators",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]
keywords = ["mcp", "model-context-protocol", "code-analysis", "api-generation", "llm"]
requires-python = ">=3.8"
dependencies = [
    # Core functionality
    "click>=8.1.0",
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "rich>=13.0.0",
    "typer>=0.9.0",

    # Repository handling and Git operations
    "GitPython>=3.1.40",
    "dulwich>=0.21.0",
    "gitignore-parser>=0.1.0",

    # Language detection and analysis
    "tree-sitter>=0.20.0",
    "tree-sitter-python>=0.20.0",
    "tree-sitter-javascript>=0.20.0",
    "tree-sitter-typescript>=0.20.0",
    "tree-sitter-go>=0.20.0",
    "tree-sitter-rust>=0.20.0",
    "tree-sitter-java>=0.20.0",
    "tree-sitter-c>=0.20.0",
    "tree-sitter-cpp>=0.20.0",

    # Language-specific tooling
    "pygments>=2.15.0",
    "libcst>=1.0.0",  # Python CST parsing
    "jedi>=0.19.0",   # Python code intelligence

    # LLM integration
    "openai>=1.0.0",
    "anthropic>=0.8.0",
    "langchain>=0.1.0",
    "langchain-openai>=0.0.5",
    "langchain-anthropic>=0.1.0",

    # MCP framework
    "mcp>=0.1.0",
    "jsonschema>=4.0.0",
    "jsonschema-specifications>=2023.0.0",

    # Web scraping and documentation analysis
    "requests>=2.31.0",
    "beautifulsoup4>=4.12.0",
    "markdown>=3.5.0",
    "python-frontmatter>=1.0.0",

    # File processing and utilities
    "PyYAML>=6.0.0",
    "toml>=0.10.0",
    "pathspec>=0.11.0",
    "watchdog>=3.0.0",
    "jinja2>=3.1.0",

    # Vector embeddings and search
    "sentence-transformers>=2.2.0",
    "chromadb>=0.4.0",
    "numpy>=1.24.0",

    # Subprocess and execution management
    "psutil>=5.9.0",
    "timeout-decorator>=0.5.0",

    # Security and sandboxing
    "docker>=6.0.0",
    "virtualenv>=20.0.0",

    # Configuration and environment
    "python-dotenv>=1.0.0",
    "platformdirs>=3.0.0",

    # Async and concurrency
    "aiofiles>=23.0.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-asyncio>=0.21.0",
    "pytest-timeout>=2.1.0",
    "coverage>=7.3.0",

    # Code quality
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "bandit>=1.7.5",
    "pre-commit>=3.3.0",

    # Documentation
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",

    # Development tools
    "ipython>=8.14.0",
    "jupyter>=1.0.0",
    "notebook>=7.0.0",
]

web = [
    # Web UI dependencies
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "jinja2>=3.1.0",
    "python-multipart>=0.0.6",
    "websockets>=11.0.0",
]

security = [
    # Enhanced security features
    "cryptography>=41.0.0",
    "pynacl>=1.5.0",
    "authlib>=1.2.0",
]

monitoring = [
    # Analytics and monitoring
    "prometheus-client>=0.17.0",
    "structlog>=23.1.0",
    "sentry-sdk>=1.29.0",
]

all = [
    "mcpify[dev,web,security,monitoring]"
]

[project.urls]
Homepage = "https://github.com/yourorg/mcpify"
Documentation = "https://mcpify.readthedocs.io"
Repository = "https://github.com/yourorg/mcpify"
"Bug Tracker" = "https://github.com/yourorg/mcpify/issues"
Changelog = "https://github.com/yourorg/mcpify/blob/main/CHANGELOG.md"

[project.scripts]
mcpify = "mcpify.cli:main"

[project.entry-points."mcpify.plugins"]
# Plugin system for extensibility
python = "mcpify.plugins.python:PythonPlugin"
javascript = "mcpify.plugins.javascript:JavaScriptPlugin"
typescript = "mcpify.plugins.typescript:TypeScriptPlugin"
go = "mcpify.plugins.go:GoPlugin"
rust = "mcpify.plugins.rust:RustPlugin"

[tool.hatch.version]
path = "mcpify/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["mcpify"]

[tool.hatch.build.targets.sdist]
exclude = [
    "/.github",
    "/docs",
    "/tests",
    "/.gitignore",
    "/.pre-commit-config.yaml",
]

# Testing configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--cov=mcpify",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "security: marks tests that check security features",
]

[tool.coverage.run]
source = ["mcpify"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/conftest.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["mcpify"]
known_third_party = ["click", "pydantic", "tree_sitter", "openai", "anthropic"]

# Type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "tree_sitter.*",
    "dulwich.*",
    "chromadb.*",
    "sentence_transformers.*",
]
ignore_missing_imports = true

# Security scanning
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]  # Skip assert_used and shell=True (we need controlled shell access)

# Linting
[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".venv",
    "venv",
    ".mypy_cache",
    ".pytest_cache",
]

[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/**/*.py" = ["B011"]  # Allow assert False in tests
